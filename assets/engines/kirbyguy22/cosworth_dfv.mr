import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
label ign_offset(25)

public node dfv_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 11000 * units.rpm;
	input limiter_duration: 0.03;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire5, (1.0 / 8.0) * cycle)
            .connect_wire(wires.wire3, (2.0 / 8.0) * cycle)
            .connect_wire(wires.wire7, (3.0 / 8.0) * cycle)
            .connect_wire(wires.wire4, (4.0 / 8.0) * cycle)
            .connect_wire(wires.wire8, (5.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (6.0 / 8.0) * cycle)
            .connect_wire(wires.wire6, (7.0 / 8.0) * cycle);
}

public node dfv_lobe_in_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 256 * units.deg,
            gamma: 2.0,
            lift: 401 * units.thou,
            steps: 100
        );
}

public node dfv_lobe_ex_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 256 * units.deg,
            gamma: 2.0,
            lift: 401 * units.thou,
            steps: 100
        );
}

public node dfv_camshaft_builder {
    input lobe_profile: dfv_lobe_in_profile();
    input lobe_profile1: dfv_lobe_ex_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile1;
    input lobe_separation: 102.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam_0: _intake_cam_0;
	output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
	output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
	camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
	camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 8.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0.12)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot + 0.06)
		.add_lobe(rot360 - exhaust_lobe_center + 2 * rot - 0.06)
		.add_lobe(rot360 - exhaust_lobe_center + 4 * rot - 0.12)
		
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot + 0.012)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot + 0.06)
		.add_lobe(rot360 - exhaust_lobe_center + 7 * rot - 0.06)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot - 0.012)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0.08)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot + 0.04)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot + 0.02)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot)
		
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 5 * rot + 0.08)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot + 0.04)
		.add_lobe(rot360 + intake_lobe_center + 7 * rot + 0.02)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot)
}

public node dfv_camshaft {
    alias output __out:
        dfv_camshaft_builder(
            advance: -0 * units.deg,
            intake_lobe_center: 102 * units.deg,
            exhaust_lobe_center: 102 * units.deg);
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node dfv_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 34.0 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.0;
    input lift_scale: 1;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 45 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 100 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 188 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 278 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 295 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 298 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 306 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 36 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 64 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 112 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 164 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 176 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 208 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 236 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 238 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 244 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 100.0 * units.cc,
        intake_runner_cross_section_area: 10.0 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node dfv_intake {
    input carburetor_cfm: 650.0;
    input idle_flow_rate_cfm: 1.0;
    input idle_throttle_plate_position: 0.975;
    input throttle_gamma: 2.0;

    alias output __out: intake;

    intake intake(
        plenum_volume: 3.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(carburetor_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        throttle_gamma: throttle_gamma,
        runner_flow_rate: k_carb(350.0),
        runner_length: 30.2 * units.cm,
        velocity_decay: 0.1
    )
}


private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node cosworth_dfv {
    alias output __out: engine;

    engine engine(
        name: "Cosworth DFV",
        starter_torque: 200 * units.lb_ft,
        starter_speed: 800 * units.rpm,
        redline: 10000 * units.rpm,
		fuel: fuel(
            max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.5)
    )

    wires wires()

    crankshaft c0(
        throw: 64.9 * units.mm / 2,
        flywheel_mass: 5 * units.lb,
        mass: 15 * 2 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.5,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (1.0 * constants.pi / 4.0)
    )

    rod_journal rj0(angle: constants.pi/2)
	rod_journal rj1(angle: -constants.pi/2)
	rod_journal rj2(angle: -constants.pi/2)
	rod_journal rj3(angle: constants.pi/2)
	
    c0
        .add_rod_journal(rj0)
		.add_rod_journal(rj1)
		.add_rod_journal(rj2)
		.add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: 400 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: 37.3 * units.mm,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 132.0 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 85.67 * units.mm,
        deck_height: (132.0 + 37.3) * units.mm + 64.9 * units.mm / 2
    )

    dfv_intake intake(
        carburetor_cfm: 650.0,
        idle_flow_rate_cfm: 0.007,
        idle_throttle_plate_position: 0.994
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(400.0),
        primary_tube_length: 25.0 * units.inch,
        primary_flow_rate: k_carb(400.0),
        velocity_decay: 1.0, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system exhaust0(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params, audio_volume: 0.4, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 45 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
			sound_attenuation: 0.8,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
			sound_attenuation: 0.8,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
		
    cylinder_bank b1(bank_params, angle: -45 * units.deg)
    b1
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
			sound_attenuation: 0.8,
            ignition_wire: wires.wire7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
			sound_attenuation: 0.8,
            ignition_wire: wires.wire6
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5
        )

    engine
        .add_cylinder_bank(b0)
		.add_cylinder_bank(b1)

	engine.add_crankshaft(c0)
	
    dfv_camshaft camshaft()

    b0.set_cylinder_head (
        dfv_head(
            chamber_volume: 34.0 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flip_display: true
        )
    )
	
    b1.set_cylinder_head (
        dfv_head(
            chamber_volume: 34.0 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, (18 + ign_offset) * units.deg)
        .add_sample(1000 * units.rpm, (20 + ign_offset) * units.deg)
        .add_sample(2000 * units.rpm, (22 + ign_offset) * units.deg)
        .add_sample(3000 * units.rpm, (26 + ign_offset) * units.deg)
        .add_sample(4000 * units.rpm, (26 + ign_offset) * units.deg)
        .add_sample(5000 * units.rpm, (26 + ign_offset) * units.deg)
        .add_sample(6000 * units.rpm, (32 + ign_offset) * units.deg)
        .add_sample(7000 * units.rpm, (32 + ign_offset) * units.deg)
		.add_sample(8000 * units.rpm, (32 + ign_offset) * units.deg)
        .add_sample(9000 * units.rpm, (32 + ign_offset) * units.deg)
        .add_sample(10000 * units.rpm, (32 + ign_offset) * units.deg)
		.add_sample(11000 * units.rpm, (-90 + ign_offset) * units.deg)

    engine.add_ignition_module(
        dfv_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

public node lotus49 {
	alias output __out: vehicle;
	vehicle vehicle(
		mass: 530,
		drag_coefficient: 0.35,
		cross_sectional_area: (31 * units.inch) * (31 * units.inch),
		diff_ratio: 4.11,
		tire_radius: 31.5 * units.cm,
		rolling_resistance: 2000
		)
}

public node lotus49_transmission {
    alias output __out:
        transmission()
            .add_gear(29.0/12.0)
			.add_gear(29.0/18.0)
			.add_gear(23.0/19.0)
			.add_gear(1.0)
			.add_gear(22.0/25.0);
}