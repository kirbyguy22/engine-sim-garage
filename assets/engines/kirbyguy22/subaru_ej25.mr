import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
label ign_offset(12)

public node b4_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7000 * units.rpm;
	input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 4.0) * cycle)
            .connect_wire(wires.wire3, (1.0 / 4.0) * cycle)
            .connect_wire(wires.wire2, (2.0 / 4.0) * cycle)
            .connect_wire(wires.wire4, (3.0 / 4.0) * cycle);
}

public node b4_lobe_in_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 204 * units.deg,
            gamma: 1.0,
            lift: 9.5 * units.mm,
            steps: 100
        );
}

public node b4_lobe_ex_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 208 * units.deg,
            gamma: 1.0,
            lift: 9.5 * units.mm,
            steps: 100
        );
}

public node b4_camshaft_builder {
    input lobe_profile_in: b4_lobe_in_profile();
    input lobe_profile_ex: b4_lobe_ex_profile();
    input intake_lobe_profile: lobe_profile_in;
    input exhaust_lobe_profile: lobe_profile_ex;
    input lobe_separation: 130.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam_0: _intake_cam_0;
	output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
	output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
	camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
	camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot90(90 * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot90)
		
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 6 * rot90)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot90)
		
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 4 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 6 * rot90)
}

public node b4_camshaft {
    alias output __out:
        b4_camshaft_builder(
            advance: 12 * units.deg,
            intake_lobe_center: 110 * units.deg,
            exhaust_lobe_center: 114 * units.deg);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
}

public node subaru_ej25 {
    alias output __out: engine;

    engine engine(
        name: "Subaru EJ25 F4",
        starter_torque: 200 * units.lb_ft,
        starter_speed: 400 * units.rpm,
        redline: 7000 * units.rpm
    )

    wires wires()

    crankshaft c0(
        throw: 79 * units.mm / 2,
        flywheel_mass: 23 * units.lb,
        mass: 20 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.9,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 2.0
    )

    rod_journal rj0(angle: -constants.pi / 2.0)
	rod_journal rj1(angle: constants.pi / 2.0)
	rod_journal rj2(angle: constants.pi / 2.0)
	rod_journal rj3(angle: -constants.pi / 2.0)
	
    c0
        .add_rod_journal(rj0)
		.add_rod_journal(rj1)
		.add_rod_journal(rj2)
		.add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: 400 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: 1.20866 * units.inch,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 5.118 * units.inch
    )

    cylinder_bank_parameters bank_params(
        bore: 99.6 * units.mm,
        deck_height: (5.118 + 1.20866) * units.inch + 79 * units.mm / 2
    )

    performer_rpm_intake intake(
        carburetor_cfm: 600.0,
        idle_flow_rate_cfm: 0.007,
        idle_throttle_plate_position: 0.997,
        throttle_gamma: 1.5
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(300.0),
        primary_tube_length: 15.0 * units.inch,
        primary_flow_rate: k_carb(150.0),
        velocity_decay: 0.5, //0.5
        volume: 40.0 * units.L
    )
	
    exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(250.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(150.0),
        velocity_decay: 0.5, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system exhaust0(es_params, audio_volume: 8.0, impulse_response: ir_lib.default_0)
	exhaust_system exhaust1(es_params1, audio_volume: 10.0, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: -90 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
		
    cylinder_bank b1(bank_params, angle: 90 * units.deg)
    b1
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4
        )

    engine
        .add_cylinder_bank(b0)
		.add_cylinder_bank(b1)

	engine.add_crankshaft(c0)
	
    b4_camshaft camshaft()

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 61.425 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flow_attenuation: 1.6,
			lift_scale: 0.8
        )
    )
	
    b1.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 61.425 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
			flow_attenuation: 1.6,
			lift_scale: 0.8,
			flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, (12 + ign_offset) * units.deg)
        .add_sample(1000 * units.rpm, (12 + ign_offset) * units.deg)
        .add_sample(2000 * units.rpm, (20 + ign_offset) * units.deg)
        .add_sample(3000 * units.rpm, (30 + ign_offset) * units.deg)
        .add_sample(4000 * units.rpm, (38 + ign_offset) * units.deg)
        .add_sample(5000 * units.rpm, (38 + ign_offset) * units.deg)
        .add_sample(6000 * units.rpm, (38 + ign_offset) * units.deg)
		.add_sample(7000 * units.rpm, (38 + ign_offset) * units.deg)

    engine.add_ignition_module(
        b4_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7000 * units.rpm
        ))
}
