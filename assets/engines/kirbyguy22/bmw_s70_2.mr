import "engine_sim.mr"
import "../../part-library/part_library.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
label cycle120(120 * units.deg)
label ign_offset(22)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

public node s702_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 7500 * units.rpm;
	input limiter_duration: 0.08;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/12.0) * cycle)
            .connect_wire(wires.wire7, (1.0/12.0) * cycle)
            .connect_wire(wires.wire5, (2.0/12.0) * cycle)
            .connect_wire(wires.wire11, (3.0/12.0) * cycle)
            .connect_wire(wires.wire3, (4.0/12.0) * cycle)
            .connect_wire(wires.wire9, (5.0/12.0) * cycle)
            .connect_wire(wires.wire6, (6.0/12.0) * cycle)
            .connect_wire(wires.wire12, (7.0/12.0) * cycle)
            .connect_wire(wires.wire2, (8.0/12.0) * cycle)
            .connect_wire(wires.wire8, (9.0/12.0) * cycle)
            .connect_wire(wires.wire4, (10.0/12.0) * cycle)
            .connect_wire(wires.wire10, (11.0/12.0) * cycle);
}

public node s702_lobe_in_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 226 * units.deg,
            gamma: 0.8,
            lift: 550 * units.thou,
            steps: 100
        );
}

public node s702_lobe_ex_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 226 * units.deg,
            gamma: 0.8,
            lift: 550 * units.thou,
            steps: 100
        );
}

public node s702_camshaft_builder {
    input lobe_profile: s702_lobe_in_profile();
    input lobe_profile1: s702_lobe_ex_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile1;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam_0: _intake_cam_0;
	output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
	output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
	camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
	camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 12.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 			0.08)
        .add_lobe(rot360 - exhaust_lobe_center + 8  * rot + 0.04)
		.add_lobe(rot360 - exhaust_lobe_center + 4  * rot + 0.12)
		.add_lobe(rot360 - exhaust_lobe_center + 10 * rot - 0.12)
		.add_lobe(rot360 - exhaust_lobe_center + 2  * rot - 0.04)
		.add_lobe(rot360 - exhaust_lobe_center + 6  * rot - 0.08)
		
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 1  * rot + 0.08)
        .add_lobe(rot360 - exhaust_lobe_center + 9  * rot + 0.04)
		.add_lobe(rot360 - exhaust_lobe_center + 5  * rot + 0.12)
		.add_lobe(rot360 - exhaust_lobe_center + 11 * rot - 0.12)
		.add_lobe(rot360 - exhaust_lobe_center + 3  * rot - 0.04)
		.add_lobe(rot360 - exhaust_lobe_center + 7  * rot - 0.08)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center +			   0)
        .add_lobe(rot360 + intake_lobe_center + 8  * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 4  * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 10 * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 2  * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 6  * rot)
		
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 1  * rot + 0)
        .add_lobe(rot360 + intake_lobe_center + 9  * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 5  * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 11 * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 3  * rot + 0)
		.add_lobe(rot360 + intake_lobe_center + 7  * rot)
}

public node s702_camshaft {
    alias output __out:
        s702_camshaft_builder(
            advance: 0 * units.deg,
            intake_lobe_center: 110 * units.deg,
            exhaust_lobe_center: 110 * units.deg);
}

public node s702_intake {
    input carburetor_cfm: 850.0;
    input idle_flow_rate_cfm: 1.0;
    input idle_throttle_plate_position: 0.975;
    input throttle_gamma: 2.0;

    alias output __out: intake;

    intake intake(
        plenum_volume: 8.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(carburetor_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        throttle_gamma: throttle_gamma,
        runner_flow_rate: k_carb(1000.0),
        runner_length: 6.0 * units.inch,
        velocity_decay: 0.1
    )
}


public node bmw_s70_2 {
    alias output __out: engine;

    engine engine(
        name: "BMW S70/2 V12",
        starter_torque: 200 * units.lb_ft,
		starter_speed: 400 * units.rpm,
        redline: 7500 * units.rpm,
		fuel: fuel(
            max_turbulence_effect: 10.0,
            burning_efficiency_randomness: 0.5)
    )

    wires wires()

    crankshaft c0(
        throw: 87.0 * units.mm / 2,
        flywheel_mass: 33 * 2 * units.lb,
        mass: 59 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        //moment_of_inertia: 0.22986844776863666 * 1.2,
		moment_of_inertia: 0.25866,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (120.0)*units.deg
    )

    rod_journal rj0(angle: 0.0)
	rod_journal rj1(angle: 2.0 * constants.pi / 3.0)
	rod_journal rj2(angle: 4.0 * constants.pi / 3.0)
	rod_journal rj3(angle: 4.0 * constants.pi / 3.0)
	rod_journal rj4(angle: 2.0 * constants.pi / 3.0)
	rod_journal rj5(angle: 0.0)
    c0
        .add_rod_journal(rj0)
		.add_rod_journal(rj1)
		.add_rod_journal(rj2)
		.add_rod_journal(rj3)
		.add_rod_journal(rj4)
		.add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 400 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: 31.65 * units.mm,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 550.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 135.0 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 86.0 * units.mm,
        deck_height: (135.0 + 31.65) * units.mm + 87.0 * units.mm / 2
    )

    s702_intake intake(
        carburetor_cfm: 1100.0,
        idle_flow_rate_cfm: 0.007,
        idle_throttle_plate_position: 0.996,
        throttle_gamma: 1.5
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1100.0),
        primary_tube_length: 12.0 * units.inch,
        primary_flow_rate: k_carb(400.0),
        velocity_decay: 1.0, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system exhaust0(es_params, audio_volume: 0.9, impulse_response: ir_lib.default_0)
	exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 30 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire6
        )

    cylinder_bank b1(bank_params, angle: -30 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire7
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire9
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire10
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire11
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire12
        )

    engine
		.add_cylinder_bank(b1)
        .add_cylinder_bank(b0)

	engine.add_crankshaft(c0)
	
    s702_camshaft camshaft()

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 45.939 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
			flip_display: true
        )
    )
	
    b1.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 45.939 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, (12 + ign_offset) * units.deg)
        .add_sample(1000 * units.rpm, (12 + ign_offset) * units.deg)
        .add_sample(2000 * units.rpm, (16 + ign_offset) * units.deg)
        .add_sample(3000 * units.rpm, (20 + ign_offset) * units.deg)
        .add_sample(4000 * units.rpm, (24 + ign_offset) * units.deg)
        .add_sample(5000 * units.rpm, (28 + ign_offset) * units.deg)
        .add_sample(6000 * units.rpm, (30 + ign_offset) * units.deg)
		.add_sample(7000 * units.rpm, (30 + ign_offset) * units.deg)

    engine.add_ignition_module(
        s702_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7500 * units.rpm
        ))
}
